services:
  # fastapi service
  backend:
    build: ./backend
    image: booking
    container_name: backend
    restart: unless-stopped
    command: ["fastapi", "dev", "src/main.py",
              "--host", "0.0.0.0", "--port", "8000"]
    networks:
      - booking-network
    volumes:
      - ./backend:/backend
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      - db
      - redis

  # react frontend service
  frontend:
    build: ./frontend
    image: react
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend
    networks:
      - booking-network
    depends_on:
      - backend

  # database services
  db:
    image: postgres:latest
    container_name: db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d booking"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - booking-network
    volumes:
      - booking-data:/var/lib/postgresql/data/
    env_file:
      - ./backend/.env

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - booking-network

  # celery background services
  celery:
    build: ./backend
    image: celery
    container_name: task-queue
    command: celery -A src worker -l info
    networks: 
      - booking-network
    volumes:
      - ./backend:/backend
    env_file:
      - ./backend/.env
    depends_on:
      - backend


networks:
  booking-network:
    driver: bridge
    name: booking-network


volumes:
  booking-data:
    driver: local
    name: booking-data
